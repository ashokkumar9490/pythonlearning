UST Day 18

please run the application


Recap 
created app
added some components - hello and welcome
What we did to apply the routing?

hello - 	event binding (click), 
		interpolation{{salary}}, 
		pipes  | currency and changing case 

	directives	structural directive - *ngFor, *ngIf

<ul *ngFor="let name of friendNames"> <li>{{name}}</li>


Angular material - we get lots of icons,
	and many styles for all the elements

install angular material  - ng add @angular/material
import { MatIconModule } from '@angular/material/icon';
add to imports array - 
 imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ReactiveFormsModule,
    MatBadgeModule,
    MatSlideToggleModule,
    MatIconModule,

Set NODE_OPTIONS="--max-old-space-size=8192"
scripts: {
  "build": "node --max_old_space_size=8192 ./node_modules/@angular/cli/bin/ng build",
  "serve": "node --max_old_space_size=8192 ./node_modules/@angular/cli/bin/ng serve"
}


in angular.json - styles array
  "styles": [
              "@angular/material/prebuilt-themes/indigo-pink.css",
              "src/styles.css"
            ],

Bootstrap -  library

property binding
classname: string = 'text-danger';
[ngClass]="classname"

To bind to an element's property, enclose it in square brackets, []

button - disable that depending on a variable 

2 way binding		

[(ngModel)]="company" 

<input type="text" [(ngModel)]="company" />
<h4>{{ company }}</h4>

import { FormsModule, ReactiveFormsModule } from '@angular/forms';		
component - variable,
on template i want to display it in -> input (textbox)
If I change the textbox value, the variable should be modified 
and again display the modified value in another element

bcos textbox is part of form - 
we have to include a module - FormsModule


new syntax in version 17  - if for and switch 

weekDay: string = 'Mon';
@switch (weekDay) { @case ("Sun"){
<h3>Enjoy! It's Sunday</h3>
} @case ("Sat"){
<h3>Enjoy! It's Saturday</h3>
} @case ("Mon"){
<h3>Back to work</h3>
}}

@for

UST Day 19

applied routing - how it is working?

When pushing to GitLab - use .gitignore    - node_modules
all folders and files those should not be shared 

How to download and run an application
clone  - npm install


different types of communication between components

parent component - child component
app-root is <hello></hello>

parent can pass some value to child component

create a new component - parent
create a new component - child


how to pass a value from parent to child component		@Input to get a value
how to pass a value from child to parent component		@Output to send a value

binding - component to template - {{}}   
class binding and property binding []  [ngClass] 
how we bind from template to component (click)="Handle()"		Event on the button
							Emitting an event - Event Handler
							Fire the event
[(ngModel)]		2 way binding

I want to run parent component - 

input output  

function getSquare(num1, out num2, out num3){			// input type
	num2 = power(num1,3)
	num3 = power(num1,4)
	return num1*num1;
}




new EventEmitter<T>()


Generic Class - class with a type parameter
function is passed with a value  getValue(7)



class Employee{
	int Id;
	
}
e1 =  new Employee()


class Employee<T>{			Generic Classes
	T Id;
	
}

e1 = new Employee<string>()

Encapsulation -  data members + methods + events
In OOPS concept data member should be private. 

data member vs properties (public that should handle private data member)

class Person{
	public firstname:string = "Sharad";
	private lastname:string = "Singh";
	public age:int=21;

	get FullName{
		return firstname + lastname;
	}

	get FirstName(){			getter property 
		return firstname;
	}

	set FirstName(fname){			getter property 
		if(fname.length>3)
			firstname = fname;
	}

	set Age(ag){
		if(ag>=18 and ag <=60)
			age=ag;
	}

}
using property we have control on business logic 


p1 = new Person()
print(p1.firstname)
p1.firstname = "Aman";		// set 
p1.Age = 87346587346;

print (p1.FullName)
		// I want to get some data
			// to access data members we use properties 
get set 

ng g c tsclass

Component life cycle 
 - there are many functions those may be called automatically

ngOnInit function will be called automatically whenever component is called/used


Project - Domain - Entities - Employee 			Product
model classes  - template 
collection of the objects - Employees			Products


cube=0
let sq = getSquare(5, out cube)
print(cube)	125


creating models to represent data 

create a new component in your project with name - todo
ng g c todo
add 2 classes in that component folder -  todoitem.ts, todoList.ts (user, todos)

and displaying models on component view
component lifecycle - some built-in events handler(s) 


multiple dot - chaining operations 


Wireframe - Case Study - 
Requirement -  create a rough design on paper - online tools
put all the required peices of design - on functionality
go for applying design


UST Day 20

change nav routerLinks  - done

alert - blocking - 
Toastr - self closing - set the time 
ngx-toastr
npm i ngx-toastr
npm install ngx-toastr --save
copy toast css to your project.

npm install @angular/animations --save
refer - https://www.npmjs.com/package/ngx-toastr
import { ToastrModule } from 'ngx-toastr';

"styles": [
  "styles.scss",
  "node_modules/ngx-toastr/toastr.css" // try adding '../' if you're using angular cli before 6
]


in component
import { ToastrService } from 'ngx-toastr';

providers: [
    provideAnimations(), // required animations providers
    provideToastr(), // Toastr providers
  ]

how to use a service 

>ng g s calculator 

Why we need a service? to make service available in all components
a service can have any number of methods - various functionalities

import { FormsModule, ReactiveFormsModule } from '@angular/forms';

 imports: [
    BrowserModule,
    AppRoutingModule,
    FormsModule,
    ReactiveFormsModule,


Forms - 1 Template Forms and 2 Reactive Forms
template - lot of html code is there and it is not model based 
Reactive Forms are preferred for these reasons

We can use forms for Login, update data for any entity

FormControl

ng g c react1
create path for this in app-routing

FormGroup + FormControl + Validations
ng g c react2
create path for this in app-routing


FormBuilder + FromGroup + FormControl
ng g c react3
create path for this in app-routing

Validating Forms




communication - from component to template and 
		from template to component
		from parent to child - using @Input()
		from child to parent - using @Output()
				and EventEmitter

What about communication between siblings - same levels component
	we need service 







